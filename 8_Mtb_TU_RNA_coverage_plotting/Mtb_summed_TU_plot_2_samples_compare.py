#!/use/bin/env python
# -*- coding: UTF-8 -*-
import sys
import os.path
import re
from Bio.Seq import Seq
import glob, os
import statistics 
from statistics import mode 
import numpy
import matplotlib.patches as mpatches
import matplotlib.pyplot as plt

TSS_transcript_infor = {}
genome = {}
genome_seq_signal={}


# The input file should be summed txt file generated by previous steps.




for num in range (0,4471711):

    genome_seq_signal[num] = [num,"", "", ""]
    
    
print ('finish the first step of data initialization\n')


input_file_name_1 = str(sys.argv[1])
pattern = input_file_name_1.split("_bed_reading")
input_file_name_s_1=pattern[0]

bed_read_file_1 = open(input_file_name_1, 'r')

for line in  bed_read_file_1:
    #line = line.strip() #去除前后空格
    
    position_informaton = line.strip().split("\t")
    if position_informaton[0].isdigit():
        position, *coverage_infor = position_informaton
        #if int(position)>210000: break
        if int(position) > 4471710 : continue
        #if int(position_informaton[0]) > 210000: break
        genome_seq_signal[int(position_informaton[0])][1] = coverage_infor
        
bed_read_file_1.close() 




input_file_name_2 = str(sys.argv[2])
pattern = input_file_name_2.split("_bed_reading")
input_file_name_s_2=pattern[0]

bed_read_file_2 = open(input_file_name_2, 'r')


for line in  bed_read_file_2:
    #line = line.strip() #去除前后空格
    
    position_informaton = line.strip().split("\t")
    if position_informaton[0].isdigit():
        position, *coverage_infor = position_informaton
        #if int(position)>210000: break
        if int(position) > 4471710 : continue
        #print(position_informaton)
        #if int(position_informaton[0]) > 210000: break
        genome_seq_signal[int(position_informaton[0])][2] = coverage_infor

        
bed_read_file_2.close()  


 





average_3000={}
average_3000_2nd={}

for site in range(0, 3000):
    average_3000[site]=[[],[]]
    average_3000_2nd[site]=[[],[]]
    

efficiency_file1= 1    #subject to change based on the normalization data.
efficiency_file2= 1    #sbuject to change based on the normalization data.

number=1
TU_infor_input_file = open('Mtb_TU_informaiton_plus_WT_log_PF.txt', "r")
for line_infor in  TU_infor_input_file:
    position_informaton = line_infor.strip().split("\t")
    if len(position_informaton)<6 : continue
    if not position_informaton[1].isdigit(): continue
    
    TU_name, original_TU_start_site, original_TU_end_site, TU_length, TU_direction=(position_informaton[0],int(position_informaton[1]),int(position_informaton[2]),int(position_informaton[3]),position_informaton[4] )
    
    
    
    
    
    initial_expression, elongation_ratio= (float(position_informaton[17]), float(position_informaton[18]))
    
    
    if (original_TU_end_site-original_TU_start_site+1)<500: continue
    #if original_TU_end_site > 210000: break
    
    if initial_expression<10: continue
    
    #if elongation_ratio <0.3: continue  # This parameter is utilized to display a specific category of TUS, such as those with a PF greater than 0.5 or less than 0.3, respectively.
    
  
    if TU_direction == "+":
        
        max_coverage=1
        max_coverage_2nd=1
        
        for  screen_position in range (original_TU_start_site, (original_TU_end_site+1)):
            
            if int(genome_seq_signal[int(screen_position)][1][2])*efficiency_file1>max_coverage: max_coverage=int(genome_seq_signal[int(screen_position)][1][2])*efficiency_file1
            if int(genome_seq_signal[int(screen_position)][2][2])*efficiency_file2>max_coverage_2nd: max_coverage_2nd=int(genome_seq_signal[int(screen_position)][2][2])*efficiency_file2
            
            
            #if screen_position>original_TU_start_site+600 or screen_position>original_TU_start_site+TU_length*0.6:
                #break
        initial_expression=1        
        for   screen_position in range (original_TU_start_site, (original_TU_start_site+200)):
            initial_expression+=int(genome_seq_signal[int(screen_position)][1][2])
        initial_expression=int(initial_expression/200)
            
        if initial_expression<50: continue  #subject to change based on the overall expression level. 
        gene_cover_start_left=original_TU_start_site
        gene_cover_start_right=original_TU_end_site
        
        
        for screen_position in range (gene_cover_start_left, (gene_cover_start_right-10)):
                
                if TU_length >= 500:
                     
                    if (int(screen_position)-gene_cover_start_left) <3000:
                        average_3000[(int(screen_position)-gene_cover_start_left)][1].append(int(genome_seq_signal[int(screen_position)][1][2])*efficiency_file1/max_coverage*100)
                        average_3000_2nd[(int(screen_position)-gene_cover_start_left)][1].append(int(genome_seq_signal[int(screen_position)][2][2])*efficiency_file2/max_coverage_2nd*100)
                        
                    
        
        number+=1
#print(average_1500)       

    if TU_direction == "-":
        
        max_coverage=1
        max_coverage_2nd=1
        
        for  screen_position in range (original_TU_end_site, (original_TU_start_site+1), -1):
            
            if int(genome_seq_signal[int(screen_position)][1][5])*efficiency_file1>max_coverage: max_coverage=int(genome_seq_signal[int(screen_position)][1][5])*efficiency_file1
            if int(genome_seq_signal[int(screen_position)][2][5])*efficiency_file2>max_coverage_2nd: max_coverage_2nd=int(genome_seq_signal[int(screen_position)][2][5])*efficiency_file2
            
        initial_expression=1        
        for   screen_position in range (original_TU_end_site, (original_TU_end_site-200), -1):
            initial_expression+=int(genome_seq_signal[int(screen_position)][1][5])
        initial_expression=int(initial_expression/200)
            
        if initial_expression<50: continue #subject to change based on the overall expression level. 
        gene_cover_start_left=original_TU_start_site
        gene_cover_start_right=original_TU_end_site
        
        print(TU_name, original_TU_start_site, original_TU_end_site, TU_length, max_coverage)
    
        
        for screen_position in range (gene_cover_start_right, (gene_cover_start_left+10), -1):
                
                if TU_length >= 500: 
                    
                    if (gene_cover_start_right-int(screen_position)) <3000:
                        average_3000[(gene_cover_start_right-int(screen_position))][1].append(int(genome_seq_signal[int(screen_position)][1][5])/max_coverage*100*efficiency_file1)
                        average_3000_2nd[(gene_cover_start_right-int(screen_position))][1].append(int(genome_seq_signal[int(screen_position)][2][5])/max_coverage_2nd*100*efficiency_file2)
                        
                    
        
        
        
        
        
        
        number+=1
        
        
    
        
    
all_average_3000=[]
for site in range(0, 3000):
    average_coverage_3000=0
    if len(average_3000[site][1])>0: average_coverage_3000 =   numpy.median(average_3000[site][1])        
    
    error_3000=0
    if len(average_3000[site][1])>2:error_3000=statistics.stdev(average_3000[site][1])
    
    all_average_3000.append([site, average_coverage_3000, error_3000 ])
    

all_average_3000_array=numpy.array(all_average_3000)

x_3000, y_3000, error_3000 = numpy.array(all_average_3000_array).T

plt.plot(x_3000, y_3000,  color="red", label="Total", linewidth=1.5)
plt.fill_between(x_3000, y_3000-error_3000,y_3000+error_3000, color="coral", alpha=0.25 )
#plt.legend(bbox_to_anchor=(0.7, 1), loc='upper left',  fontsize=8)    




all_average_3000_2nd=[]
for site in range(0, 3000):
    average_coverage_3000_2nd=0
    if len(average_3000_2nd[site][1])>0: average_coverage_3000_2nd =   numpy.median(average_3000_2nd[site][1])         
    
    error_3000_2nd=0
    if len(average_3000_2nd[site][1])>2:error_3000_2nd=statistics.stdev(average_3000_2nd[site][1])
    
    all_average_3000_2nd.append([site, average_coverage_3000_2nd, error_3000_2nd ])
    

all_average_3000_2nd_array=numpy.array(all_average_3000_2nd)

x_3000_2nd, y_3000_2nd, error_3000_2nd = numpy.array(all_average_3000_2nd_array).T

plt.plot(x_3000_2nd, y_3000_2nd,  color="blue", label="Nascent", linewidth=1.5)
plt.fill_between(x_3000_2nd, y_3000_2nd-error_3000_2nd,y_3000_2nd+error_3000_2nd, color="lightblue", alpha=0.25  )
    
plt.legend(bbox_to_anchor=(0.7, 1), loc='upper left',  fontsize=8)  



    
plt.ylim((0,100))   
plt.xlim((0,3000))
plt.ylabel('Normalized intensity')
plt.xlabel( "Distance to the TU start site (bp)")
    #plt.xlabel( 'genome position of ' + TU_name +"(" + TU_direction + ")")
plt.savefig("TU_RNA_coverage_plot_compate_plot_" + input_file_name_s_1 + "_" + input_file_name_s_2+"_N_"+str(number)+".pdf", dpi=600)
    
        
print("total counted transcritps is ", number )        
    
    
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        

