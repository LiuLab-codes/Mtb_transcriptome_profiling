#!/use/bin/env python
# -*- coding: UTF-8 -*-
import sys
import os.path
import re
from Bio.Seq import Seq
import glob, os
import statistics 
from statistics import mode 
import numpy 
import matplotlib.patches as mpatches
import matplotlib.pyplot as plt

# The input file should be summed txt file generated by previous steps.

TSS_transcript_infor = {}
genome = {}
genome_seq_signal={}


for num in range (0,4471711):

    genome_seq_signal[num] = [num,[], [], []]
    
    
print ('finish the first step of data initialization\n')

input_file_name_1 = str(sys.argv[1])
pattern = input_file_name_1.split("_bed_reading")
input_file_name_s_1=pattern[0]

bed_read_file_1 = open(input_file_name_1, 'r')

for line in  bed_read_file_1:
    #line = line.strip() #去除前后空格
    
    position_informaton = line.strip().split("\t")
    if position_informaton[0].isdigit():
        position, *coverage_infor = position_informaton
        #if int(position)>210000: break
        if int(position) > 4471710 : continue
        #print(position_informaton)
        #if int(position_informaton[0]) > 210000: break
        genome_seq_signal[int(position_informaton[0])][1] = coverage_infor

        
input_file_name_2 = str(sys.argv[2])
pattern = input_file_name_2.split("_bed_reading")
input_file_name_s_2=pattern[0]

bed_read_file_2 = open(input_file_name_2, 'r')   




for line in  bed_read_file_2:
    #line = line.strip() #去除前后空格
    
    position_informaton = line.strip().split("\t")
    if position_informaton[0].isdigit():
        position, *coverage_infor = position_informaton
        #if int(position)>210000: break
        if int(position) > 4471710 : continue
        #if int(position_informaton[0]) > 210000: break
        genome_seq_signal[int(position_informaton[0])][2] = coverage_infor
        
bed_read_file_2.close() 





efficiency_1=1  #subject to change based on the normalization data.
efficiency_2=1  #subject to change based on the normalization data.




    
average_1000={}
average_1000_2nd={}

for site in range(0, 1000):
    average_1000[site]=[[],[]]
    average_1000_2nd[site]=[[],[]]



number=0
as_tr_infor_input_file = open('Mtb_asRNA_information_log_phase.txt', "r")
for line_infor in  as_tr_infor_input_file:
    position_informaton = line_infor.strip().split("\t")
    if len(position_informaton)<6 : continue
    if not position_informaton[1].isdigit(): continue
    
    original_as_tr_start_site, original_as_tr_end_site, as_tr_length, as_tr_direction=(int(position_informaton[3]),int(position_informaton[4]),int(position_informaton[7]),position_informaton[5] )
    
    
    
    if (original_as_tr_end_site-original_as_tr_start_site+1)<100: continue
    #if original_as_tr_end_site > 210000: break
    
  
    if as_tr_direction == "+":
        
        max_coverage=1
        
        for  screen_position in range (original_as_tr_start_site, (original_as_tr_end_site+1)):
            if screen_position > original_as_tr_end_site: continue
            if int(genome_seq_signal[int(screen_position)][1][2])*efficiency_1>max_coverage: max_coverage=int(genome_seq_signal[int(screen_position)][1][2])*efficiency_1
            
        initial_expression=1        
        for   screen_position in range (original_as_tr_start_site, (original_as_tr_start_site+100)):
            initial_expression+=int(genome_seq_signal[int(screen_position)][1][2])
        initial_expression=int(initial_expression/100)
            
        if initial_expression<15: continue #subject to change based on the overall expression level. 
        
        
        gene_cover_start_left=original_as_tr_start_site
        gene_cover_start_right=original_as_tr_end_site
        
        
        for screen_position in range (gene_cover_start_left, (gene_cover_start_left+701)):
            
            as_coverage_shift_G1= int(genome_seq_signal[int(screen_position)][1][2])/max_coverage*100*efficiency_1
            
            if screen_position >= original_as_tr_end_site and int(genome_seq_signal[int(screen_position)][1][2]) >max_coverage:
                
                as_coverage_shift_G1=0
            
            as_coverage_shift_G2= int(genome_seq_signal[int(screen_position)][2][2])/max_coverage*100*efficiency_2
            
            if screen_position >= original_as_tr_end_site and int(genome_seq_signal[int(screen_position)][2][2]) >max_coverage:
                
                as_coverage_shift_G2=0
            
            average_1000[(int(screen_position)-gene_cover_start_left)][1].append(as_coverage_shift_G1)
            average_1000_2nd[(int(screen_position)-gene_cover_start_left)][1].append(as_coverage_shift_G2)
                 
        
       
        number+=1

    if as_tr_direction == "-":
        
        max_coverage=1
        
        for  screen_position in range (original_as_tr_end_site, (original_as_tr_start_site+1), -1):
            if screen_position < original_as_tr_start_site: continue
            if int(genome_seq_signal[int(screen_position)][1][5])*efficiency_1>max_coverage: max_coverage=int(genome_seq_signal[int(screen_position)][1][5])*efficiency_1
            
        initial_expression=1        
        for   screen_position in range (original_as_tr_end_site, (original_as_tr_end_site-100), -1):
            initial_expression+=int(genome_seq_signal[int(screen_position)][1][5])
        initial_expression=int(initial_expression/100)
            
        if initial_expression<15: continue #subject to change based on the overall expression level. 
        
       
       
        gene_cover_start_left=original_as_tr_start_site
        gene_cover_start_right=original_as_tr_end_site
        
        
        for screen_position in range (gene_cover_start_right, (gene_cover_start_right-701), -1):
            
            
            if screen_position < 1: continue
            
            as_coverage_shift_G1= int(genome_seq_signal[int(screen_position)][1][5])/max_coverage*100*efficiency_1
            
            if screen_position <= original_as_tr_start_site and int(genome_seq_signal[int(screen_position)][1][5]) >max_coverage:
                
                as_coverage_shift_G1=0
            
            as_coverage_shift_G2= int(genome_seq_signal[int(screen_position)][2][5])/max_coverage*100*efficiency_2
            
            if screen_position <= original_as_tr_start_site and int(genome_seq_signal[int(screen_position)][2][5]) >max_coverage:
                
                as_coverage_shift_G2=0
            
            
            
            
            
            
            
            
      
            average_1000[(gene_cover_start_right-int(screen_position))][1].append(as_coverage_shift_G1)
            average_1000_2nd[(gene_cover_start_right-int(screen_position))][1].append(as_coverage_shift_G2)
                  

        number+=1
        
        
        


all_average_1000=[]
for site in range(0, 1000):
    if site ==50:
        print(site)
        for i in average_1000[site][1]: print(str(i)+"\n")
    if site>700: continue
    
    average_coverage_1000=0
    if len(average_1000[site][1])>0: average_coverage_1000 = numpy.mean(average_1000[site][1])
    
    error_1000=0
    if len(average_1000[site][1])>2:error_1000=statistics.stdev(average_1000[site][1])
    
    all_average_1000.append([site, average_coverage_1000, error_1000 ])
    

all_average_1000_array=numpy.array(all_average_1000)

x_1000, y_1000, error_1000 = numpy.array(all_average_1000_array).T

plt.plot(x_1000, y_1000,  color="red", label="Total RNA", linewidth=1.5)
plt.fill_between(x_1000, y_1000-error_1000,y_1000+error_1000, color="coral", alpha=0.25 )


all_average_1000_2nd=[]
for site in range(0, 1000):
    if site ==50:
        print(site)
        for i in average_1000_2nd[site][1]: print(str(i)+"\n")
    if site>700: continue
    #if len(average_1000_2nd[site][1]) < 300: continue
    average_coverage_1000_2=0
    if len(average_1000_2nd[site][1])>0: average_coverage_1000_2 = numpy.mean(average_1000_2nd[site][1])
    #print(site, average_coverage_1000)
    error_1000_2=0
    if len(average_1000_2nd[site][1])>2:error_1000_2=statistics.stdev(average_1000_2nd[site][1])
    
    all_average_1000_2nd.append([site, average_coverage_1000_2, error_1000_2 ])
    

all_average_1000_2nd_array=numpy.array(all_average_1000_2nd)

x_1000_2, y_1000_2, error_1000_2 = numpy.array(all_average_1000_2nd_array).T

plt.plot(x_1000_2, y_1000_2,  color="blue", label="Nascent RNA", linewidth=1.5)

plt.fill_between(x_1000_2, y_1000_2-error_1000_2,y_1000_2+error_1000_2, color="lightblue", alpha=0.25 )











    
plt.legend(bbox_to_anchor=(0.7, 1), loc='upper left')
plt.ylim((0,300))   
plt.xlim((0,700))
plt.ylabel('Normalized RNA coverage')
plt.xlabel( "Distance to TSS (nt)")
    #plt.xlabel( 'genome position of ' + as_tr_name +"(" + as_tr_direction + ")")
plt.savefig("Mtb_asRNA_coverage"+input_file_name_s_1+input_file_name_s_2+"_N_"+str(number)+".pdf", dpi=600)
    
        
print("total counted transcritps is ", number )        
    
    
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        

