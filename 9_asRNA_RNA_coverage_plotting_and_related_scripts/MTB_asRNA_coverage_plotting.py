#!/use/bin/env python
# -*- coding: UTF-8 -*-
import sys
import os.path
import re
from Bio.Seq import Seq
import glob, os
import statistics 
from statistics import mode 
import numpy 
import matplotlib.patches as mpatches
import matplotlib.pyplot as plt


# The input file should be summed txt file generated by previous steps.






TSS_transcript_infor = {}
genome = {}
genome_seq_signal={}






#home_directory = os.getenv("HOME")
for num in range (0,4471711):
#for num in range (0,471711):
    #genome[num] = [0,0,0,0,0,0,0,0]
    genome_seq_signal[num] = [num,[], 0, 0]
    #if num > 210000: break
    
print ('finish the first step of data initialization\n')






TSS_input_file =  open('Mtb_TSS_final.txt', 'r')

for line in  TSS_input_file:
    #line = line.strip() #去除前后空格
    
    position_informaton = line.strip().split("\t")
    if position_informaton[0].isdigit():
        #if int(position_informaton[0]) > 210000: continue
        #if int(position_informaton[0]) >21000:
            #continue
    
        if (len(position_informaton) >2):
            if (str(position_informaton[1]) == "+"):
                genome_seq_signal[int(position_informaton[0])][2]= int(position_informaton[2])
                
                
            elif (str(position_informaton[1]) == "-"):
                genome_seq_signal[int(position_informaton[0])][3]=int(position_informaton[2])
        
    #print (position_informaton[0], position_informaton[1], position_informaton[2])
TSS_input_file.close()

print("finish TSS input")



 


input_file_name = str(sys.argv[1])
head, tail = os.path.split(input_file_name)
pattern = tail.split("_bed_reading")
input_file_name_s=pattern[0]
bed_input_file = open(input_file_name, 'r')
#1st file
group1_name ="WT_total"
group1_name_total_coverage =0
for line_bed in  bed_input_file:
    position_informaton_bed = line_bed.strip().split("\t")
        
    if (len(position_informaton_bed) >4) :
        
        position, *coverage_infor = position_informaton_bed
        #if int(position)>210000: break
        if int(position) > 4471710 : continue  #pay attention to this restriction
        genome_seq_signal[int(position)][1]=coverage_infor
        #print(genome_seq_signal[int(position)][1])
        #group1_name_total_coverage += (int(coverage_infor[2])+int(coverage_infor[5]))
bed_input_file.close
# format of input_bed_data: 67	[0	0	25	0	0	19]

    
average_1000={}
for site in range(-100, 1000):
    average_1000[site]=[[],[]]



number=0
as_tr_infor_input_file = open('Mtb_asRNA_information_log_phase.txt', "r")
for line_infor in  as_tr_infor_input_file:
    position_informaton = line_infor.strip().split("\t")
    if len(position_informaton)<6 : continue
    if not position_informaton[1].isdigit(): continue
    
    original_as_tr_start_site, original_as_tr_end_site, as_tr_length, as_tr_direction=(int(position_informaton[3]),int(position_informaton[4]),int(position_informaton[7]),position_informaton[5] )
    
    
    
    if (original_as_tr_end_site-original_as_tr_start_site+1)<100: continue
    #if original_as_tr_end_site > 210000: break
    #if as_tr_length >700: continue
  
    if as_tr_direction == "+":
        
        
        upstream_tss=0
        for  screen_position in range (original_as_tr_start_site, (original_as_tr_start_site-200), -1):
            
            if genome_seq_signal[int(screen_position)][2]>50: upstream_tss+=genome_seq_signal[int(screen_position)][2]
        if upstream_tss >50: continue
        
        
        max_coverage=1
        
        for  screen_position in range (original_as_tr_start_site, (original_as_tr_end_site+1)):
            
            if int(genome_seq_signal[int(screen_position)][1][2])>max_coverage: max_coverage=int(genome_seq_signal[int(screen_position)][1][2])
            #rt_site+as_tr_length*0.6:
                #break
        initial_expression=1        
        for   screen_position in range (original_as_tr_start_site, (original_as_tr_start_site+100)):
            initial_expression+=int(genome_seq_signal[int(screen_position)][1][2])
        initial_expression=int(initial_expression/100)
            
        if initial_expression<20: continue  # the number is subjected to change based on the overall RNA coverage.
        
        #print(original_as_tr_start_site, original_as_tr_end_site, as_tr_length, max_coverage)
    
        
        
        gene_cover_start_left=original_as_tr_start_site
        gene_cover_start_right=original_as_tr_end_site
        
        #print(gene_cover_start_left,gene_cover_start_right)
        for screen_position in range ((gene_cover_start_left-100), (gene_cover_start_left+701)):
            as_coverage_shift= int(genome_seq_signal[int(screen_position)][1][2])/max_coverage*100
            
            if screen_position >= original_as_tr_end_site and int(genome_seq_signal[int(screen_position)][1][2]) >max_coverage:
                
                as_coverage_shift=0
                
                
            
            
            
           
                
                
                   
            average_1000[(int(screen_position)-gene_cover_start_left)][1].append(as_coverage_shift)
                 
        
      
        
        
        number+=1
#print(average_1500)       

    if as_tr_direction == "-":
        
        
        upstream_tss=0
        for  screen_position in range  (original_as_tr_end_site, (original_as_tr_end_site+200)):
            
            if genome_seq_signal[int(screen_position)][3]>50: upstream_tss+=genome_seq_signal[int(screen_position)][3]
        if upstream_tss >50: continue
        
        
        
        
        
        
        
        max_coverage=1
        
        for  screen_position in range (original_as_tr_end_site, (original_as_tr_start_site+1), -1):
            
            if int(genome_seq_signal[int(screen_position)][1][5])>max_coverage: max_coverage=int(genome_seq_signal[int(screen_position)][1][5])
            
            #if screen_position<original_as_tr_end_site-200 : break
                #break
        initial_expression=1        
        for   screen_position in range (original_as_tr_end_site, (original_as_tr_end_site-100), -1):
            initial_expression+=int(genome_seq_signal[int(screen_position)][1][5])
        initial_expression=int(initial_expression/100)
            
        if initial_expression<20: continue
        
        print(original_as_tr_start_site, original_as_tr_end_site, as_tr_length, max_coverage)
    
        
        
        gene_cover_start_left=original_as_tr_start_site
        gene_cover_start_right=original_as_tr_end_site
        
        #print(gene_cover_start_left,gene_cover_start_right)
        for screen_position in range ((gene_cover_start_right+100), (gene_cover_start_right-701), -1):
            
            if screen_position < 1: continue
            
            
            as_coverage_shift= int(genome_seq_signal[int(screen_position)][1][5])/max_coverage*100
            
            if screen_position <= original_as_tr_start_site and int(genome_seq_signal[int(screen_position)][1][5]) >max_coverage:
                
                as_coverage_shift=0
                
                
            
            
            average_1000[(gene_cover_start_right-int(screen_position))][1].append(as_coverage_shift)
                  
        
        number+=1
        
        
        


all_average_1000=[]
for site in range(-100, 2000):
    if site ==50:
        print(site)
        for i in average_1000[site][1]: print(str(i)+"\n")
    if site>700: continue
    #if len(average_1000[site][1]) < 500: continue
    average_coverage_1000=0
    if len(average_1000[site][1])>0: average_coverage_1000 = numpy.median(average_1000[site][1])
    #print(site, average_coverage_1000)
    error_1000=0
    if len(average_1000[site][1])>2:error_1000=statistics.stdev(average_1000[site][1])
    
    all_average_1000.append([site, average_coverage_1000, error_1000 ])
    

all_average_1000_array=numpy.array(all_average_1000)

x_1000, y_1000, error_1000 = numpy.array(all_average_1000_array).T

plt.plot(x_1000, y_1000,  color="blue")
plt.fill_between(x_1000, y_1000-error_1000,y_1000+error_1000, color="lightblue" )    
    
#plt.legend(bbox_to_anchor=(0.7, 1), loc='upper left')
plt.ylim((0,120))   
plt.xlim((-100,700))
plt.ylabel('Normalized intensity (%)')
plt.xlabel( "Distance to the TSS (nt)")
    #plt.xlabel( 'genome position of ' + as_tr_name +"(" + as_tr_direction + ")")
plt.savefig(input_file_name_s+"_N_"+str(number)+"_asRNA_coverage"+".pdf", dpi=600)
    
        
print("total counted transcritps is ", number )        
    
    
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        

