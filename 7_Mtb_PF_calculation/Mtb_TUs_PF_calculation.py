#!/use/bin/env python
# -*- coding: UTF-8 -*-
import sys
import os.path
import math


# The input file should be summed txt file generated by previous steps.And the output file will include the PF information in the final column.


TSS_transcript_infor = {}
genome = {}
genome_seq_signal={}
cwd = os.getcwd()

home_directory = os.getenv("HOME")
for num in range (0,4471711):

    genome[num] = ["",0,0,"","","",[],[]]
    
    
print ('finished the first step of data structure initialization\n')



TSS_input_file =  open('Mtb_TSS_final.txt', 'r')

for line in  TSS_input_file:
    
    
    position_informaton = line.strip().split("\t")
    if position_informaton[0].isdigit():
        
    
        if (len(position_informaton) >3):
            if (str(position_informaton[1]) == "+"):
                genome[int(position_informaton[0])][1]=int(position_informaton[2])
                
                
            elif (str(position_informaton[1]) == "-"):
                genome[int(position_informaton[0])][2]=int(position_informaton[2])
        
    
TSS_input_file.close()


print ("finish the step of loading the TSS information\n")

input_file_name = str(sys.argv[1])
pattern = input_file_name.split("_bed_reading")
input_file_name_s=pattern[0]
#print(input_file_name_s)
spike_in_RNA_coverage=1
RNA_coverage=0
bed_read_file_1 = open(input_file_name, 'r')
for line in  bed_read_file_1:
    #line = line.strip() #去除前后空格
    
    position_informaton = line.strip().split("\t")
    if position_informaton[0].isdigit():
        #if int(position_informaton[0]) > 210000: break
        
        if   1471585 < int(position_informaton[0]) < 1477050 : 
            genome[int(position_informaton[0])][3]=[int(position_informaton[0]), 0, 0,0,0,0,0]
        
        else:
            genome[int(position_informaton[0])][3] = position_informaton
        
        
        
            if int(position_informaton[0]) <=4411709: RNA_coverage += int(genome[int(position_informaton[0])][3][3])
            if int(position_informaton[0]) <=4411709: RNA_coverage += int(genome[int(position_informaton[0])][3][6])
            if int(position_informaton[0]) > 4411709: spike_in_RNA_coverage +=int(genome[int(position_informaton[0])][3][3])
        
        

        
bed_read_file_1.close()   
spike_in_RNA_coverage=round(spike_in_RNA_coverage/600000,2 )+1
RNA_coverage_normalized= round(RNA_coverage/4456782, 2)

print(input_file_name_s,RNA_coverage_normalized)

operon_elongation_infor_inputfile= open('Mtb_TU_annotation_information.txt', 'r')
output_file= open(input_file_name_s+ '_TU_elongation_profiling.txt',  'w')


for line in  operon_elongation_infor_inputfile:
    position_informaton = line.strip().split("\t")
    
    if not position_informaton[1].isdigit():
        
        newline="\t".join(str(i) for i in position_informaton) + "\t"+"\t".join(str(i) for i in("initial_length","initial_expression", "normalized_initial_expression", "normalized_initial_expression_2_spike_RNA",  "elongation_length", "elongation_expression", "normalized_elongation_expression","normalized_elongation_expression_2_spike_RNA", "elongation_ratio(PF)" ))+"\n"
        output_file.write(newline)
        
        
        
        
    
    
    
    if not position_informaton[1].isdigit(): continue
    
    
    operon_seral_number, operon_start_site, operon_end_site,  operon_length, operon_direction, coding_start, coding_end, essential_check,leaderless_check, included_gene_number, coding_gene, TSS_peak_site,  tss_extention_end, elongation_check_start_site,	elongation_check_end_site, elongation_check_length, coding_TU_infor, *others =position_informaton
    
    
    #print(operon_seral_number, operon_start_site, operon_end_site,  operon_length, operon_direction, coding_start, coding_end, essential_check, included_gene_number, coding_gene, elongation_check_start_site,	elongation_check_end_site, elongation_check_length,)
    if coding_TU_infor != "selected":
        
        newline="\t".join(str(i) for i in  (operon_seral_number, operon_start_site, operon_end_site,  operon_length, operon_direction, coding_start, coding_end, essential_check, leaderless_check, included_gene_number, coding_gene, TSS_peak_site,tss_extention_end,  elongation_check_start_site,	elongation_check_end_site,elongation_check_length, coding_TU_infor))+"\n"
        
        output_file.write(newline)
        
        
    
    
    if coding_TU_infor == "selected" and operon_direction=="+":
        
        initial_expression, elongation_expression=(1,1)
        initial_length, elongation_length=(0,0)
        for screen_position in range ( int(TSS_peak_site), int(TSS_peak_site)+200):
            initial_length+=1
            initial_expression+=int(genome[int(screen_position)][3][3])
        
        for screen_position in range ( int(TSS_peak_site)+500, int(elongation_check_end_site)):
            if genome[screen_position][1]!=0:
                
                upstream_check, downstream_check=(1,0)
                
                for shift_position in range(0, 20):
                    
                    upstream_check+= int(genome[int(screen_position)-shift_position-1][3][3])
                    downstream_check+= int(genome[int(screen_position)+shift_position][3][3])
                if downstream_check>=upstream_check*1.5: break
                
            elongation_length+=1
            elongation_expression+=int(genome[int(screen_position)][3][3])
        
        if elongation_length==0: elongation_length=1
        if initial_length==0: initial_length=1
        initial_expression=round(initial_expression/initial_length,2)
        elongation_expression=round(elongation_expression/elongation_length,2)
        elongation_ratio= round(elongation_expression/(initial_expression+1), 2)
        #print(elongation_ratio)
        normalized_initial_expression = round(initial_expression/RNA_coverage_normalized, 2)
        normalized_initial_expression_2_spike_RNA = round(initial_expression/spike_in_RNA_coverage, 2)
        normalized_elongation_expression=round(elongation_expression/RNA_coverage_normalized, 2)
        normalized_elongation_expression_2_spike_RNA=round(elongation_expression/spike_in_RNA_coverage, 2)
        
        newline="\t".join(str(i) for i in  (operon_seral_number, operon_start_site, operon_end_site,  operon_length, operon_direction, coding_start, coding_end, essential_check, leaderless_check, included_gene_number, coding_gene, TSS_peak_site, tss_extention_end, elongation_check_start_site,	elongation_check_end_site,elongation_check_length, coding_TU_infor, initial_length,initial_expression, normalized_initial_expression, normalized_initial_expression_2_spike_RNA,  elongation_length, elongation_expression, normalized_elongation_expression, normalized_elongation_expression_2_spike_RNA,  elongation_ratio))+"\n"
        
        output_file.write(newline)
        
        
    if coding_TU_infor == "selected" and operon_direction=="-":
        
        initial_expression, elongation_expression=(1,1)
        initial_length, elongation_length=(0,0)
        for screen_position in range ( int(TSS_peak_site), int(TSS_peak_site)-200, -1):
            initial_length+=1
            initial_expression+=int(genome[int(screen_position)][3][6])
        
        for screen_position in range ( (int(TSS_peak_site)-500), int(elongation_check_end_site), -1):
            
            if genome[screen_position][2]!=0:
                
                upstream_check, downstream_check=(1,0)
                
                for shift_position in range(0, 20):
                    
                    upstream_check+= int(genome[int(screen_position)+shift_position][3][6])
                    downstream_check+= int(genome[int(screen_position)-shift_position-1][3][6])
                if downstream_check>=upstream_check*1.5: break
                
                
            elongation_length+=1
            elongation_expression+=int(genome[int(screen_position)][3][6])
        
        if elongation_length==0: elongation_length=1
        if initial_length==0: initial_length=1
        initial_expression=round(initial_expression/initial_length,2)
        elongation_expression=round(elongation_expression/elongation_length,2)
        elongation_ratio= round(elongation_expression/(initial_expression+1), 2)
        normalized_initial_expression = round(initial_expression/RNA_coverage_normalized, 2)
        normalized_initial_expression_2_spike_RNA = round(initial_expression/spike_in_RNA_coverage, 2)
        normalized_elongation_expression=round(elongation_expression/RNA_coverage_normalized, 2)
        normalized_elongation_expression_2_spike_RNA=round(elongation_expression/spike_in_RNA_coverage, 2)
        
        
        
        
        newline="\t".join(str(i) for i in  (operon_seral_number, operon_start_site, operon_end_site,  operon_length, operon_direction, coding_start, coding_end, essential_check, leaderless_check, included_gene_number, coding_gene, TSS_peak_site,tss_extention_end,  elongation_check_start_site,	elongation_check_end_site,elongation_check_length, coding_TU_infor,  initial_length,initial_expression, normalized_initial_expression,  normalized_initial_expression_2_spike_RNA, elongation_length, elongation_expression, normalized_elongation_expression, normalized_elongation_expression_2_spike_RNA, elongation_ratio))+"\n"
        
        output_file.write(newline)
    
        
        
            
        
        
        












